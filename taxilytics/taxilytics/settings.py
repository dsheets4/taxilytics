"""
Django settings for taxilytics project.

Generated by 'django-admin startproject' using Django 1.8.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import platform


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'lcd87=s=l8otaemxo__z1x&*+!d#_dmcs3_zz%qdb^wgingwv2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# When DEPLOYED = True; turn on security features that are mostly for https.
DEPLOYED = False
if DEPLOYED:
    SECURE_HSTS_SECONDS = 3600  # 3600 seconds is one hour
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True

ALLOWED_HOSTS = [
    'localhost', '127.0.0.1',
    '192.168.1.17', '192.168.122.245',
    'visserver1.vislab.cs.kent.edu'
]
INTERNAL_IPS = ('127.0.0.1', '192.168.1.17', '192.168.122.245')


# Application definition

INSTALLED_APPS = (
    # Default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Integration of the postgres specific contrib (hstore provide dict)
    'django.contrib.postgres',

    # Various extension capabilities including ipython notebook integration
    'django_extensions',

    # GIS database addition
    'django.contrib.gis',

    # Debugging various django aspects
    'debug_toolbar',

    # Django REST framework
    'rest_framework',
    'rest_framework_gis',

    # JavaScript integration
    'require',

    # Custom development
    'entity',
    'pgrouting',
    'features',
    'query',
    'osm',
    'topic',
    'cluster',
    'ui',

    'streetcube',
)

# -----------------------------------------------------------------------------
# Configuration for django-extensions
# This sets up use of the notebooks dir to work with the sub-directory 'notebooks'
SHELL_PLUS = "ipython"
NOTEBOOK_ARGUMENTS = [
    '--notebook-dir', 'notebooks'
]
# -----------------------------------------------------------------------------

MIDDLEWARE_CLASSES = (
    'django.middleware.gzip.GZipMiddleware',
    # Debug Toolbar must come after middleware that encodes responses like GZip
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

# Middleware Options
X_FRAME_OPTIONS = 'DENY'


ROOT_URLCONF = 'taxilytics.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Default
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'taxilytics.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
CITY = 'nyc'  # hangzhou, nyc, shenzhen
DB_NAME = 'taxilytics-{}'.format(CITY)
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': DB_NAME,               # Name of the spatial database
        'USER': 'django',              # Database user
        'PASSWORD': 'djangopsql2015',  # Database password
        'HOST': '127.0.0.1',
        'PORT': '5432',
    },
}
# DATABASES['pgrouting'] = DATABASES['default'].copy()
# DATABASES['pgrouting']['OPTIONS'] = {
#     'options': '-c search_path=pgrouting'
# }

ROUTING = {
    'executable': '/home/dingbat/src/taxi/osm2pgrouting/build/osm2pgrouting',
    'conf': '/home/dingbat/src/taxi/osm2pgrouting/src/mapconfig_for_cars.xml',
    'schema': 'public'
}

LOGIN_URL = 'login'
LOGOUT_URL = 'logout'

# Cache, it's really nice for making the API faster but not so good for
# repeatedly running a URL in testing.
if platform.system() == 'Windows':
    MEMCACHE_ENABLED = False
    APP_DIR = os.path.join(os.getenv('APPDATA'), 'taxilytics', 'log')
    OSM_DATA = ''
else:
    MEMCACHE_ENABLED = True
    APP_DIR = '/var/log/taxilytics'
    OSM_DATA = os.path.join('/home/dingbat/data/taxi/osm/latest', CITY)
    # Caching entire pages requires middleware.  However, we will more
    # intelligently run the cache where needed.
    # MIDDLEWARE_CLASSES = (
    #     ('django.middleware.cache.UpdateCacheMiddleware',) + MIDDLEWARE_CLASSES
    # )
    # MIDDLEWARE_CLASSES = (
    #     MIDDLEWARE_CLASSES + ('django.middleware.cache.FetchFromCacheMiddleware',)
    # )
    # print(MIDDLEWARE_CLASSES)
os.makedirs(APP_DIR, exist_ok=True)
LOG_FILE = os.path.join(APP_DIR, 'taxilytics.log')

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    },
    'large-object': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
        'TIMEOUT': None,
    }
}
if MEMCACHE_ENABLED:
    CACHES['default'] = {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'KEY_PREFIX': 'taxilytics:',
        'TIMEOUT': 43200,
    }

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
    'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',),
    'PAGE_SIZE': 1000,
}

TOPIC_SETTINGS = {
    'CACHE': 'default'
}

DEBUG_TOOLBAR_CONFIG = {
    # Debug toolbar will attempt internet download but works with local version
    'JQUERY_URL': ''
}
DEBUG_TOOLBAR_PATCH_SETTINGS = False
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    # 'debug_toolbar.panels.profiling.ProfilingPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]

level = 'INFO'
handlers = ['file']
if DEBUG:
    handlers.append('console')
    # level = 'DEBUG'

app_logging_config = {
    'handlers': handlers,
    'propagate': True,
    'level': level,
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s "
                      "[%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            # 'level': 'WARNING',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE,
            'maxBytes': 100*1024*1024,  # 100MB
            'backupCount': 10,
            'formatter': 'verbose',
            # 'level': 'WARNING',
        },
        # This would send an email to the admin when there is an error.
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'filters': ['require_debug_false'],
        #     'class': 'django.utils.log.AdminEmailHandler'
        # }
    },
    'loggers': {
        'django': {
            'handlers': handlers,
            'propagate': True,
            'level': 'INFO',
        },
        'entity': app_logging_config,
        'topic': app_logging_config,
        'osm': app_logging_config,
        'features': app_logging_config,
        'query': app_logging_config,
        'cluster': app_logging_config,
        'streetcube': app_logging_config,
    },
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Django-require settings
REQUIRE_BASE_URL = ""
REQUIRE_JS = "js/require.js"
REQUIRE_BUILD_PROFILE = 'require.build.js'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATICFILES_STORAGE = 'require.storage.OptimizedStaticFilesStorage'
# URL path to prepend when access staticfiles
STATIC_URL = '/static/'
# Where static files are copied during collectstatic
STATIC_ROOT = os.path.join('/var/www/html', STATIC_URL[1:])
# STATICFILES_DIRS defines locations where static files reside.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
